// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/libmachete/plugin/group/types (interfaces: ProvisionHelper)

package types

import (
	types "github.com/docker/libmachete/plugin/group/types"
	group "github.com/docker/libmachete/spi/group"
	instance "github.com/docker/libmachete/spi/instance"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ProvisionHelper interface
type MockProvisionHelper struct {
	ctrl     *gomock.Controller
	recorder *_MockProvisionHelperRecorder
}

// Recorder for MockProvisionHelper (not exported)
type _MockProvisionHelperRecorder struct {
	mock *MockProvisionHelper
}

func NewMockProvisionHelper(ctrl *gomock.Controller) *MockProvisionHelper {
	mock := &MockProvisionHelper{ctrl: ctrl}
	mock.recorder = &_MockProvisionHelperRecorder{mock}
	return mock
}

func (_m *MockProvisionHelper) EXPECT() *_MockProvisionHelperRecorder {
	return _m.recorder
}

func (_m *MockProvisionHelper) GroupKind(_param0 string) types.GroupKind {
	ret := _m.ctrl.Call(_m, "GroupKind", _param0)
	ret0, _ := ret[0].(types.GroupKind)
	return ret0
}

func (_mr *_MockProvisionHelperRecorder) GroupKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GroupKind", arg0)
}

func (_m *MockProvisionHelper) Healthy(_param0 instance.Description) (bool, error) {
	ret := _m.ctrl.Call(_m, "Healthy", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionHelperRecorder) Healthy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthy", arg0)
}

func (_m *MockProvisionHelper) PreProvision(_param0 group.Configuration, _param1 instance.Spec) (instance.Spec, error) {
	ret := _m.ctrl.Call(_m, "PreProvision", _param0, _param1)
	ret0, _ := ret[0].(instance.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionHelperRecorder) PreProvision(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PreProvision", arg0, arg1)
}

func (_m *MockProvisionHelper) Validate(_param0 group.Configuration, _param1 types.Schema) error {
	ret := _m.ctrl.Call(_m, "Validate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProvisionHelperRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate", arg0, arg1)
}
