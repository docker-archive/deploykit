// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/libmachete/provisioners/spi (interfaces: Credential,KeyStore,Provisioner)

package api

import (
	spi "github.com/docker/libmachete/provisioners/spi"
	gomock "github.com/golang/mock/gomock"
	// Note: this line is hand-edited as a workaround for https://github.com/golang/mock/issues/4
	context "golang.org/x/net/context"
)

// Mock of Credential interface
type MockCredential struct {
	ctrl     *gomock.Controller
	recorder *_MockCredentialRecorder
}

// Recorder for MockCredential (not exported)
type _MockCredentialRecorder struct {
	mock *MockCredential
}

func NewMockCredential(ctrl *gomock.Controller) *MockCredential {
	mock := &MockCredential{ctrl: ctrl}
	mock.recorder = &_MockCredentialRecorder{mock}
	return mock
}

func (_m *MockCredential) EXPECT() *_MockCredentialRecorder {
	return _m.recorder
}

func (_m *MockCredential) Authenticate(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "Authenticate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCredentialRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Authenticate", arg0)
}

func (_m *MockCredential) Refresh(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "Refresh", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCredentialRecorder) Refresh(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Refresh", arg0)
}

// Mock of KeyStore interface
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyStoreRecorder
}

// Recorder for MockKeyStore (not exported)
type _MockKeyStoreRecorder struct {
	mock *MockKeyStore
}

func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &_MockKeyStoreRecorder{mock}
	return mock
}

func (_m *MockKeyStore) EXPECT() *_MockKeyStoreRecorder {
	return _m.recorder
}

func (_m *MockKeyStore) GetEncodedPublicKey(_param0 spi.SSHKeyID) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetEncodedPublicKey", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyStoreRecorder) GetEncodedPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncodedPublicKey", arg0)
}

func (_m *MockKeyStore) NewKeyPair(_param0 spi.SSHKeyID) error {
	ret := _m.ctrl.Call(_m, "NewKeyPair", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyStoreRecorder) NewKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewKeyPair", arg0)
}

func (_m *MockKeyStore) Remove(_param0 spi.SSHKeyID) error {
	ret := _m.ctrl.Call(_m, "Remove", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyStoreRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remove", arg0)
}

// Mock of Provisioner interface
type MockProvisioner struct {
	ctrl     *gomock.Controller
	recorder *_MockProvisionerRecorder
}

// Recorder for MockProvisioner (not exported)
type _MockProvisionerRecorder struct {
	mock *MockProvisioner
}

func NewMockProvisioner(ctrl *gomock.Controller) *MockProvisioner {
	mock := &MockProvisioner{ctrl: ctrl}
	mock.recorder = &_MockProvisionerRecorder{mock}
	return mock
}

func (_m *MockProvisioner) EXPECT() *_MockProvisionerRecorder {
	return _m.recorder
}

func (_m *MockProvisioner) CreateInstance(_param0 spi.MachineRequest) (<-chan spi.CreateInstanceEvent, error) {
	ret := _m.ctrl.Call(_m, "CreateInstance", _param0)
	ret0, _ := ret[0].(<-chan spi.CreateInstanceEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstance", arg0)
}

func (_m *MockProvisioner) DestroyInstance(_param0 string) (<-chan spi.DestroyInstanceEvent, error) {
	ret := _m.ctrl.Call(_m, "DestroyInstance", _param0)
	ret0, _ := ret[0].(<-chan spi.DestroyInstanceEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) DestroyInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DestroyInstance", arg0)
}

func (_m *MockProvisioner) GetIPAddress(_param0 spi.MachineRequest) (string, error) {
	ret := _m.ctrl.Call(_m, "GetIPAddress", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) GetIPAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPAddress", arg0)
}

func (_m *MockProvisioner) GetInstanceID(_param0 spi.MachineRequest) (string, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) GetInstanceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceID", arg0)
}

func (_m *MockProvisioner) GetProvisionTasks(_param0 []spi.TaskName) ([]spi.Task, error) {
	ret := _m.ctrl.Call(_m, "GetProvisionTasks", _param0)
	ret0, _ := ret[0].([]spi.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) GetProvisionTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetProvisionTasks", arg0)
}

func (_m *MockProvisioner) GetTeardownTasks(_param0 []spi.TaskName) ([]spi.Task, error) {
	ret := _m.ctrl.Call(_m, "GetTeardownTasks", _param0)
	ret0, _ := ret[0].([]spi.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerRecorder) GetTeardownTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeardownTasks", arg0)
}

func (_m *MockProvisioner) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockProvisionerRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockProvisioner) NewRequestInstance() spi.MachineRequest {
	ret := _m.ctrl.Call(_m, "NewRequestInstance")
	ret0, _ := ret[0].(spi.MachineRequest)
	return ret0
}

func (_mr *_MockProvisionerRecorder) NewRequestInstance() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewRequestInstance")
}
