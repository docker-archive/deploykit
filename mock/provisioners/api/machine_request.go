// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/libmachete/provisioners/api (interfaces: MachineRequest)

package api

import (
	api "github.com/docker/libmachete/provisioners/api"
	gomock "github.com/golang/mock/gomock"
)

// Mock of MachineRequest interface
type MockMachineRequest struct {
	ctrl     *gomock.Controller
	recorder *_MockMachineRequestRecorder
}

// Recorder for MockMachineRequest (not exported)
type _MockMachineRequestRecorder struct {
	mock *MockMachineRequest
}

func NewMockMachineRequest(ctrl *gomock.Controller) *MockMachineRequest {
	mock := &MockMachineRequest{ctrl: ctrl}
	mock.recorder = &_MockMachineRequestRecorder{mock}
	return mock
}

func (_m *MockMachineRequest) EXPECT() *_MockMachineRequestRecorder {
	return _m.recorder
}

func (_m *MockMachineRequest) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockMachineRequest) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockMachineRequest) ProvisionWorkflow() []api.TaskName {
	ret := _m.ctrl.Call(_m, "ProvisionWorkflow")
	ret0, _ := ret[0].([]api.TaskName)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) ProvisionWorkflow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProvisionWorkflow")
}

func (_m *MockMachineRequest) ProvisionerName() string {
	ret := _m.ctrl.Call(_m, "ProvisionerName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) ProvisionerName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProvisionerName")
}

func (_m *MockMachineRequest) TeardownWorkflow() []api.TaskName {
	ret := _m.ctrl.Call(_m, "TeardownWorkflow")
	ret0, _ := ret[0].([]api.TaskName)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) TeardownWorkflow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TeardownWorkflow")
}

func (_m *MockMachineRequest) Version() string {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRequestRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}
