// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/libmachete/provisioners/api (interfaces: KeyStore)

package api

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of KeyStore interface
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyStoreRecorder
}

// Recorder for MockKeyStore (not exported)
type _MockKeyStoreRecorder struct {
	mock *MockKeyStore
}

func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &_MockKeyStoreRecorder{mock}
	return mock
}

func (_m *MockKeyStore) EXPECT() *_MockKeyStoreRecorder {
	return _m.recorder
}

func (_m *MockKeyStore) GetEncodedPublicKey(_param0 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetEncodedPublicKey", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyStoreRecorder) GetEncodedPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncodedPublicKey", arg0)
}

func (_m *MockKeyStore) NewKeyPair(_param0 string) error {
	ret := _m.ctrl.Call(_m, "NewKeyPair", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyStoreRecorder) NewKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewKeyPair", arg0)
}

func (_m *MockKeyStore) Remove(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Remove", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyStoreRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remove", arg0)
}
