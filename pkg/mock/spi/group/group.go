// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/infrakit/pkg/spi/group (interfaces: Plugin)

package group

import (
	group "github.com/docker/infrakit/pkg/spi/group"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *_MockPluginRecorder
}

// Recorder for MockPlugin (not exported)
type _MockPluginRecorder struct {
	mock *MockPlugin
}

func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &_MockPluginRecorder{mock}
	return mock
}

func (_m *MockPlugin) EXPECT() *_MockPluginRecorder {
	return _m.recorder
}

func (_m *MockPlugin) CommitGroup(_param0 group.Spec, _param1 bool) (string, error) {
	ret := _m.ctrl.Call(_m, "CommitGroup", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) CommitGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CommitGroup", arg0, arg1)
}

func (_m *MockPlugin) DescribeGroup(_param0 group.ID) (group.Description, error) {
	ret := _m.ctrl.Call(_m, "DescribeGroup", _param0)
	ret0, _ := ret[0].(group.Description)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) DescribeGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeGroup", arg0)
}

func (_m *MockPlugin) DestroyGroup(_param0 group.ID) error {
	ret := _m.ctrl.Call(_m, "DestroyGroup", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) DestroyGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DestroyGroup", arg0)
}

func (_m *MockPlugin) FreeGroup(_param0 group.ID) error {
	ret := _m.ctrl.Call(_m, "FreeGroup", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) FreeGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FreeGroup", arg0)
}

func (_m *MockPlugin) InspectGroups() ([]group.Spec, error) {
	ret := _m.ctrl.Call(_m, "InspectGroups")
	ret0, _ := ret[0].([]group.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) InspectGroups() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InspectGroups")
}
