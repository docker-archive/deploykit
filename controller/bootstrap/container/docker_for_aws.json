{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Docker for AWS Beta 4 (docker 1.12.0)",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "id_rsa_aws",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.micro"
    },
    "ManagerInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.micro"
    },
    "ClusterSize" : {
      "Type" : "Number",
      "Default" : "5",
      "MinValue" : "1",
      "MaxValue" : "1000",
      "Description" : "Number of worker nodes in the Swarm (1-1000)."
    },
    "ManagerSize" : {
      "Type" : "Number",
      "Default" : "3",
      "AllowedValues" : ["1", "3", "5"],
      "Description" : "Number of Swarm manager nodes (1, 3, 5)"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Swarm Size" },
          "Parameters" : [ "ManagerSize", "ClusterSize" ]
        },
        {
          "Label" : { "default":"Swarm Properties" },
          "Parameters" : [ "ManagerInstanceType", "InstanceType", "KeyName" ]
        }
      ],
      "ParameterLabels" : {
        "ManagerSize" : { "default" : "Number of Swarm managers?" },
        "ClusterSize" : { "default" : "Number of Swarm worker nodes?" },
        "InstanceType" : { "default" : "Agent worker instance type?" },
        "ManagerInstanceType" : { "default" : "Swarm manager instance type?" },
        "KeyName" : { "default" : "Which SSH key to use?" }
      }
    }
  },
  "Mappings": {

    "DockerForAWS" : {
      "version" : {
        "docker": "1.12.0",
        "forAws": "aws-v1.12.0-beta4"
      }
    },

    "VpcCidrs" : {
      "vpc" : {
        "cidr": "192.168.0.0/16"
      },
      "pubsubnet1" : {
        "cidr": "192.168.33.0/24"
      },
      "pubsubnet2" : {
        "cidr": "192.168.34.0/24"
      }
    },

    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-west-1": {
        "HVM64": "ami-1b3b7b7b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-4bab652b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-1": {
        "HVM64": "ami-39d2452e",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-adb9d5de",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-34a3545b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-ad36e9ce",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "HVM64": "ami-68f03509",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-2": {
        "HVM64": "ami-4e1f2a2d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-de07cdb0",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-da50c7b6",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },

  "Resources": {

    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet1", "cidr" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet2", "cidr" ] },
        "AvailabilityZone" :  { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "DependsOn" : "Vpc",
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "RT"] ] } }
        ]
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "SwarmWideSG": {
      "DependsOn": "NodeVpcSG",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Wide open",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] }
          }
        ]
      }
    },
    "SwarmSQSCleanup" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ReceiveMessageWaitTimeSeconds": 10
      }
    },
    "SwarmSQS" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ReceiveMessageWaitTimeSeconds": 10
      }
    },
    "SwarmManagerUpgradeHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn" : "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "ManagerAsg" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Fn::GetAtt": [ "SwarmSQS", "Arn" ] },
        "RoleARN": { "Fn::GetAtt": [ "ProxyRole", "Arn" ] }
      }
    },
    "SwarmWorkerUpgradeHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn" : "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "NodeAsg" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Fn::GetAtt": [ "SwarmSQS", "Arn" ] },
        "RoleARN": { "Fn::GetAtt": [ "ProxyRole", "Arn" ] }
      }
    },
    "ManagerVpcSG": {
      "DependsOn": "NodeVpcSG",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Manager SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp","FromPort": "2375","ToPort": "2375", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
          {"IpProtocol" : "tcp", "FromPort" : "2377", "ToPort" : "2377", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
          {"IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
          {"IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
          {"IpProtocol" : "udp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } }
        ]
      }
    },
    "NodeVpcSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Node SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp","FromPort": "80","ToPort": "80","CidrIp": "0.0.0.0/0"}
        ]
      }
    },

    "SwarmDynDBTable" : {
      "DependsOn" : "ExternalLoadBalancer",
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "dyndbtable" ] ] },
        "AttributeDefinitions": [ {
          "AttributeName" : "node_type",
          "AttributeType" : "S"
        } ],
        "KeySchema": [
          { "AttributeName": "node_type" , "KeyType": "HASH" }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 1,
          "WriteCapacityUnits" : 1
        }
      }
    },

    "ManagerAsg" : {
      "DependsOn" : "SwarmDynDBTable",
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "ManagerLaunchConfigBeta3" },
        "LoadBalancerNames" : [ { "Ref" : "SSHLoadBalancer" }, { "Ref" : "ExternalLoadBalancer" } ],
        "MinSize" : "0",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "ManagerSize" },
        "Tags": [
          { "Key" : "Name",
            "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Manager" ] ] },
            "PropagateAtLaunch" : "true" },
          { "Key" : "swarm-node-type",
            "Value" : "manager",
            "PropagateAtLaunch" : "true" },
          { "Key" : "swarm-stack-id",
            "Value" : { "Ref" : "AWS::StackId"},
            "PropagateAtLaunch" : "true" },
          { "Key": "DOCKER_FOR_AWS_VERSION",
            "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] },
            "PropagateAtLaunch" : "true" },
          { "Key": "DOCKER_VERSION",
            "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "docker" ] },
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref" : "ManagerSize"},
          "Timeout": "PT20M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "WaitOnResourceSignals" : "true",
          "PauseTime" : "PT20M"
        }
      }
    },

    "ManagerLaunchConfigBeta3": {
      "DependsOn": "ExternalLoadBalancer",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": {"Ref" : "ManagerInstanceType"},
        "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "ManagerInstanceType"}, "Arch"]
          }]
        },
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmWideSG"} ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/sh\n",
                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",
                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"127.0.0.1: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"localhost: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                "chown -R docker /home/docker/\n",
                "chgrp -R docker /home/docker/\n",
                "sleep 5\n",

                "docker run --restart=no -d ",
                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                "-e NODE_TYPE='manager' ",
                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                "-e INSTANCE_NAME='ManagerAsg' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",

                "docker run --restart=always -d ",
                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                "-e NODE_TYPE='manager' ",
                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                "-e INSTANCE_NAME='ManagerAsg' ",
                "-e VPC_ID='",{ "Ref" : "Vpc" }, "' ",
                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                "-e SWARM_QUEUE='",{ "Ref" : "SwarmSQS" }, "' ",
                "-e CLEANUP_QUEUE='",{ "Ref" : "SwarmSQSCleanup" }, "' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n",

                "docker run --restart=always -d -p 22:22 ",
                "-v /home/docker/:/home/docker/ ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "-v /etc/passwd:/etc/passwd:ro ",
                "-v /etc/shadow:/etc/shadow:ro ",
                "-v /etc/group:/etc/group:ro ",
                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                "docker run --restart=always -d --name=editions_controller ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                "docker4x/controller:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n"
              ]
            ]
          }
        }
      }
    },
    "NodeAsg" : {
      "DependsOn" : "ManagerAsg",
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "NodeLaunchConfigBeta3" },
        "LoadBalancerNames" : [ { "Ref" : "ExternalLoadBalancer" } ],
        "MinSize" : "0",
        "MaxSize" : "1000",
        "DesiredCapacity" : { "Ref" : "ClusterSize"},
        "Tags": [
          { "Key" : "Name",
            "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "worker" ] ] },
            "PropagateAtLaunch" : "true" },
          { "Key" : "swarm-node-type",
            "Value" : "worker",
            "PropagateAtLaunch" : "true" },
          { "Key" : "swarm-stack-id",
            "Value" : { "Ref" : "AWS::StackId"},
            "PropagateAtLaunch" : "true" },
          { "Key": "DOCKER_FOR_AWS_VERSION",
            "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] },
            "PropagateAtLaunch" : "true" },
          { "Key": "DOCKER_VERSION",
            "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "docker" ] },
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref" : "ClusterSize"},
          "Timeout": "PT20M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "WaitOnResourceSignals" : "true",
          "PauseTime" : "PT20M"
        }
      }
    },
    "NodeLaunchConfigBeta3": {
      "DependsOn": "ManagerAsg",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": {"Ref" : "InstanceType"},
        "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "InstanceType"}, "Arch"]
          }]
        },
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [ { "Ref" : "NodeVpcSG"}, { "Ref" : "SwarmWideSG"} ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/sh\n",
                "export DOCKER_FOR_AWS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                "chown -R docker /home/docker/\n",
                "chgrp -R docker /home/docker/\n",
                "sleep 5\n",
                "docker run --restart=no -d ",
                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                "-e NODE_TYPE='worker' ",
                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                "-e INSTANCE_NAME='NodeAsg' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_AWS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "docker4x/init-aws:$DOCKER_FOR_AWS_VERSION\n",

                "docker run --restart=always -d ",
                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                "-e NODE_TYPE='worker' ",
                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                "-e INSTANCE_NAME='NodeAsg' ",
                "-e VPC_ID='",{ "Ref" : "Vpc" }, "' ",
                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                "-e SWARM_QUEUE='",{ "Ref" : "SwarmSQS" }, "' ",
                "-e CLEANUP_QUEUE='",{ "Ref" : "SwarmSQSCleanup" }, "' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_AWS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "docker4x/guide-aws:$DOCKER_FOR_AWS_VERSION\n"
              ]
            ]
          }
        }
      }
    },
    "ExternalLoadBalancerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "External Load Balancer SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "-1","FromPort": "0","ToPort": "65535","CidrIp": "0.0.0.0/0"}
        ]
      }
    },
    "ExternalLoadBalancer" : {
      "DependsOn" : "AttachGateway",
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "ConnectionSettings" : {
          "IdleTimeout" : "600"
        },
        "Subnets" : [
          {"Ref" : "PubSubnetAz1" },
          {"Ref" : "PubSubnetAz2" }
        ],
        "Listeners" : [
          {
            "LoadBalancerPort" : "7",
            "InstancePort" : "7",
            "Protocol" : "TCP"
          }
        ],
        "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] },
        "CrossZone" : "true",
        "HealthCheck" : {
          "HealthyThreshold" : "2",
          "Interval" : "10",
          "Target" : "TCP:2375",
          "Timeout" : "2",
          "UnhealthyThreshold" : "4"
        },
        "SecurityGroups" : [ { "Ref" : "ExternalLoadBalancerSG" } ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] }
          }
        ]
      }
    },
    "SSHLoadBalancerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "SSH Load Balancer SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "-1","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"}
        ]
      }
    },
    "SSHLoadBalancer" : {
      "DependsOn" : "AttachGateway",
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "ConnectionSettings" : {
          "IdleTimeout" : "1800"
        },
        "Subnets" : [
          {"Ref" : "PubSubnetAz1" },
          {"Ref" : "PubSubnetAz2" }
        ],
        "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] },
        "CrossZone" : "true",
        "HealthCheck" : {
          "HealthyThreshold" : "2",
          "Interval" : "10",
          "Target" : "TCP:22",
          "Timeout" : "2",
          "UnhealthyThreshold" : "4"
        },
        "Listeners" : [
          {
            "LoadBalancerPort" : "22",
            "InstancePort" : "22",
            "Protocol" : "TCP"
          }
        ],
        "SecurityGroups" : [ { "Ref" : "SSHLoadBalancerSG" } ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] }
          }
        ]
      }
    },
    "ProxyRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com", "autoscaling.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },
    "DynDBPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "dyndb-getput",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:UpdateItem",
              "dynamodb:Query"
            ],
            "Resource": { "Fn::Join": ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "SwarmDynDBTable" }]] }
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "SwarmAPIPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVpcAttribute"
            ],
            "Resource": "*"
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "SwarmSQSPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-sqs-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "sqs:*",
            "Resource": { "Fn::GetAtt" : ["SwarmSQS", "Arn"]}
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "SwarmSQSCleanupPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-sqs-cleanup-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "sqs:*",
            "Resource": { "Fn::GetAtt" : ["SwarmSQSCleanup", "Arn"]}
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "SwarmAutoscalePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-autoscale-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "autoscaling:*",
            "Resource": "*"
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "ProxyPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "elb-update",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
          } ]
        },
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    },
    "ProxyInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "ProxyRole"
        } ]
      }
    }
  },
  "Outputs": {
    "DefaultDNSTarget" : {
      "Description" : "Use this name to update your DNS records",
      "Value" : {
        "Fn::GetAtt" : [ "ExternalLoadBalancer", "DNSName" ]
      }
    },
    "SSH" : {
      "Description" : "Use this command to login to your Docker console.",
      "Value" : {
        "Fn::Join": [ "", ["ssh docker@", {"Fn::GetAtt" : [ "SSHLoadBalancer", "DNSName"] } ] ]
      }
    }
  }
}
