{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "libmachete POC",

    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "id_rsa_aws",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ManagerInstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Default" : "1",
            "MinValue" : "1",
            "MaxValue" : "100",
            "Description" : "Number of worker nodes in the Swarm (1-100)."
        },
        "ManagerSize" : {
            "Type" : "Number",
            "Default" : "3",
            "AllowedValues" : ["1", "3", "5"],
            "Description" : "Number of Swarm manager nodes (1, 3, 5)"
        }
    },
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "Swarm Size" },
                    "Parameters" : [ "ManagerSize", "ClusterSize" ]
                },
                {
                    "Label" : { "default":"Swarm Properties" },
                    "Parameters" : [ "ManagerInstanceType", "InstanceType", "KeyName" ]
                }
            ],
            "ParameterLabels" : {
                "ManagerSize" : { "default" : "Number of Swarm managers?" },
                "ClusterSize" : { "default" : "Number of Swarm worker nodes?" },
                "InstanceType" : { "default" : "Agent worker instance type?" },
                "ManagerInstanceType" : { "default" : "Swarm manager instance type?" },
                "KeyName" : { "default" : "Which SSH key to use?" }
            }
        }
    },
    "Mappings": {

        "DockerForAWS" : {
            "version" : {
                "docker": "1.12.0",
                "forAws": "aws-v1.12.0-beta4"
            }
        },

        "VpcCidrs" : {
            "vpc" : {
                "cidr": "192.168.0.0/16"
            },
            "pubsubnet1" : {
                "cidr": "192.168.33.0/24"
            },
            "pubsubnet2" : {
                "cidr": "192.168.34.0/24"
            }
        },

        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.4xlarge": {
                "Arch": "HVM64"
            },
            "m4.10xlarge": {
                "Arch": "HVM64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.4xlarge": {
                "Arch": "HVM64"
            },
            "d2.8xlarge": {
                "Arch": "HVM64"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-west-1": {
                "HVM64": "ami-1b3b7b7b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-2": {
                "HVM64": "ami-4bab652b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-east-1": {
                "HVM64": "ami-39d2452e",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-1": {
                "HVM64": "ami-adb9d5de",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "HVM64": "ami-34a3545b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "HVM64": "ami-ad36e9ce",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-1": {
                "HVM64": "ami-68f03509",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-2": {
                "HVM64": "ami-4e1f2a2d",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-2": {
                "HVM64": "ami-de07cdb0",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "HVM64": "ami-da50c7b6",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },

    "Resources": {

        "Vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] },
                "EnableDnsSupport" : true,
                "EnableDnsHostnames" : true,
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
                ]
            }
        },

        "PubSubnetAz1" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet1", "cidr" ] },
                "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
                ]
            }
        },

        "PubSubnetAz2" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet2", "cidr" ] },
                "AvailabilityZone" :  { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
                ]
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
                ]
            }
        },

        "AttachGateway" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "RouteViaIgw" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc"},
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "RT"] ] } }
                ]
            }
        },

        "PublicRouteViaIgw" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteViaIgw" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PubSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz1" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "PubSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz2" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "SwarmSG": {
            "DependsOn": "NodeVpcSG",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Wide open",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] }
                    }
                ]
            }
        },
        "ManagerVpcSG": {
            "DependsOn": "NodeVpcSG",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Manager SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "2375","ToPort": "2375", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "2377", "ToPort" : "2377", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "8889", "ToPort" : "8888", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "Vpc", "DefaultSecurityGroup" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "8889", "ToPort" : "8889", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "Vpc", "DefaultSecurityGroup" ] } }                ]
            }
        },
        "NodeVpcSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Node SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp","FromPort": "80","ToPort": "80","CidrIp": "0.0.0.0/0"}
                ]
            }
        },


        "Manager1" : {
            "DependsOn" : ["PubSubnet1RouteTableAssociation", "ManagerVpcSG"],
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : { "Fn::GetAtt" : [ "PubSubnetAz1", "AvailabilityZone" ] },
                "InstanceType": {"Ref" : "ManagerInstanceType"},
                "IamInstanceProfile" : { "Ref" : "ManagerInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "ManagerInstanceType"}, "Arch"]
                    }]
                },
                "NetworkInterfaces" : [
                    {
                        "AssociatePublicIpAddress": true,
                        "SubnetId" : { "Ref" : "PubSubnetAz1" },
                        "GroupSet": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmSG"} ],
                        "DeviceIndex": "0"
                    }
                ],
                "Monitoring" : true,
                "Tags" : [
                    {"Key" : "Name", "Value" : {"Fn::Join" : [ "", [{ "Ref" : "AWS::StackName"}, "-manager1"]] }},
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
				"set -x\n",
				"MANAGER=$(wget -qO- http://169.254.169.254/latest/meta-data/hostname)\n",
                                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",
                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                                "chown -R docker /home/docker/\n",
                                "chgrp -R docker /home/docker/\n",
                                "sleep 5\n",

                                "docker run --restart=always -d -p 22:22 ",
                                "-v /home/docker/:/home/docker/ ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "-v /etc/passwd:/etc/passwd:ro ",
                                "-v /etc/shadow:/etc/shadow:ro ",
                                "-v /etc/group:/etc/group:ro ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --detach --name=swarm_boot ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/swarmboot init\n",

                                "docker run --restart=always -d --publish 8889:8889 --name=token_server ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/tokenserver run\n",

                                "docker run --restart=always -d --name=editions_controller ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                                "docker4x/controller:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n",

				"docker run --detach --restart=always --name macheted ",
				"-p 8888:8888 ",
				"--volume /var/run/docker.sock:/var/run/docker.sock ",
				"wfarner/machete --cluster ", { "Ref" : "AWS::StackName" },
				" --port 8888 aws --region ", { "Ref" : "AWS::Region"}, "\n",
				"\n",
				"run_worker=\"#!/bin/bash\ndocker run --detach --volume /var/run/docker.sock:/var/run/docker.sock wfarner/swarmboot join $(hostname -i) --worker\" \n",
				"worker_user_data=$(echo \"$run_worker\" | base64 | tr -d '\n')",
				"\n",
				"cat << EOF > ./worker-request.swpt\n",
				"{",
				"    \"group\": \"workers\",",
				"    \"tags\": {\"bill-machete-testing\": \"testing\"},",
				"    \"run_instances_input\": {",
				"        \"EbsOptimized\": false,",
				"        \"ImageId\": \"",
				{
				    "Fn::FindInMap": ["AWSRegionArch2AMI", {
					"Ref": "AWS::Region"
				    }, {
					"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "InstanceType"}, "Arch"]
				    }]
				}, "\",",
				"        \"InstanceType\": \"",{ "Ref" : "InstanceType" },"\",",
				"        \"KeyName\": \"",{ "Ref" : "KeyName" },"\",",
				"        \"Placement\": {",
				"            \"AvailabilityZone\": \"", { "Fn::GetAtt" : [ "PubSubnetAz2", "AvailabilityZone" ] },"\"",
				"        },",
				"        \"SubnetId\": \"",{ "Ref" : "PubSubnetAz2" },"\",",
				"        \"SecurityGroupIds\": [\"",{ "Ref" : "SwarmSG" },"\"],",
				"        \"UserData\": \"$worker_user_data\"",
				"    }",
				"}\n",
				"EOF\n",
				"docker run --detach --restart always --name scaler ",
				"--volume /var/run/docker.sock:/var/run/docker.sock ",
				"--volume /worker-request.swpt:/worker-request.swpt ",
				"wfarner/scaler run ${MANAGER}:8888 ",{ "Ref": "ClusterSize"}," ./worker-request.swpt \n"
                            ]
                        ]
                    }
                }
            }
        },

        "Manager2" : {
            "DependsOn" : ["PubSubnet1RouteTableAssociation", "ManagerVpcSG"],
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : { "Fn::GetAtt" : [ "PubSubnetAz1", "AvailabilityZone" ] },
                "InstanceType": {"Ref" : "ManagerInstanceType"},
                "IamInstanceProfile" : { "Ref" : "ManagerInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "ManagerInstanceType"}, "Arch"]
                    }]
                },
                "NetworkInterfaces" : [
                    {
                        "AssociatePublicIpAddress": true,
                        "SubnetId" : { "Ref" : "PubSubnetAz1" },
                        "GroupSet": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmSG"} ],
                        "DeviceIndex": "0"
                    }
                ],
                "Monitoring" : true,
                "Tags" : [
                    {"Key" : "Name", "Value" : {"Fn::Join" : [ "", [{ "Ref" : "AWS::StackName"}, "-manager2"]] }},
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",
                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                                "chown -R docker /home/docker/\n",
                                "chgrp -R docker /home/docker/\n",
                                "sleep 5\n",

                                "docker run --restart=always -d -p 22:22 ",
                                "-v /home/docker/:/home/docker/ ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "-v /etc/passwd:/etc/passwd:ro ",
                                "-v /etc/shadow:/etc/shadow:ro ",
                                "-v /etc/group:/etc/group:ro ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --detach --name=swarm_boot ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/swarmboot join ", { "Fn::GetAtt" : [ "Manager1", "PrivateIp" ] },"\n",

                                "docker run --restart=always -d  --name=token_server ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/tokenserver run\n",

                                "docker run --restart=always -d --name=editions_controller ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                                "docker4x/controller:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n"
                            ]
                        ]
                    }
                }
            }
        },


        "Manager3" : {
            "DependsOn" : ["PubSubnet1RouteTableAssociation", "ManagerVpcSG"],
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : { "Fn::GetAtt" : [ "PubSubnetAz1", "AvailabilityZone" ] },
                "InstanceType": {"Ref" : "ManagerInstanceType"},
                "IamInstanceProfile" : { "Ref" : "ManagerInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "ManagerInstanceType"}, "Arch"]
                    }]
                },
                "NetworkInterfaces" : [
                    {
                        "AssociatePublicIpAddress": true,
                        "SubnetId" : { "Ref" : "PubSubnetAz1" },
                        "GroupSet": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmSG"} ],
                        "DeviceIndex": "0"
                    }
                ],
                "Monitoring" : true,
                "Tags" : [
                    {"Key" : "Name", "Value" : {"Fn::Join" : [ "", [{ "Ref" : "AWS::StackName"}, "-manager3"]] }},
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",
                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                                "chown -R docker /home/docker/\n",
                                "chgrp -R docker /home/docker/\n",
                                "sleep 5\n",

                                "docker run --restart=always -d -p 22:22 ",
                                "-v /home/docker/:/home/docker/ ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "-v /etc/passwd:/etc/passwd:ro ",
                                "-v /etc/shadow:/etc/shadow:ro ",
                                "-v /etc/group:/etc/group:ro ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --detach --name=swarm_boot ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/swarmboot join ", { "Fn::GetAtt" : [ "Manager1", "PrivateIp" ] },"\n",

                                "docker run --restart=always -d  --name=token_server ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "wfarner/tokenserver run\n",

                                "docker run --restart=always -d --name=editions_controller ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                                "docker4x/controller:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ExternalLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "External Load Balancer SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "-1","FromPort": "0","ToPort": "65535","CidrIp": "0.0.0.0/0"}
                ]
            }
        },
        "ExternalLoadBalancer" : {
            "DependsOn" : ["AttachGateway"],
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "ConnectionSettings" : {
                    "IdleTimeout" : "600"
                },
                "Subnets" : [
                    {"Ref" : "PubSubnetAz1" },
                    {"Ref" : "PubSubnetAz2" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "7",
                        "InstancePort" : "7",
                        "Protocol" : "TCP"
                    }
                ],
                "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] },
                "CrossZone" : true,
                "HealthCheck" : {
                    "HealthyThreshold" : "2",
                    "Interval" : "10",
                    "Target" : "TCP:2375",
                    "Timeout" : "2",
                    "UnhealthyThreshold" : "4"
                },
                "SecurityGroups" : [ { "Ref" : "ExternalLoadBalancerSG" } ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] }
                    }
                ]
            }
        },
        "SSHLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "SSH Load Balancer SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "-1","FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"}
                ]
            }
        },
        "SSHLoadBalancer" : {
            "DependsOn" : ["AttachGateway"],
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "ConnectionSettings" : {
                    "IdleTimeout" : "1800"
                },
                "Subnets" : [
                    {"Ref" : "PubSubnetAz1" },
                    {"Ref" : "PubSubnetAz2" }
                ],
                "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] },
                "CrossZone" : true,
                "HealthCheck" : {
                    "HealthyThreshold" : "2",
                    "Interval" : "10",
                    "Target" : "TCP:22",
                    "Timeout" : "2",
                    "UnhealthyThreshold" : "4"
                },
                "Instances" : [
                    { "Ref" : "Manager1" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "22",
                        "InstancePort" : "22",
                        "Protocol" : "TCP"
                    }
                ],
                "SecurityGroups" : [ { "Ref" : "SSHLoadBalancerSG" } ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB-SSH" ] ] }
                    }
                ]
            }
        },
        "ManagerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com", "autoscaling.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/"
            }
        },
        "SwarmAPIPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "swarm-policy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:DescribeInstances",
                            "ec2:DescribeVpcAttribute"
                        ],
                        "Resource": "*"
                    } ]
                },
                "Roles": [ {
                    "Ref": "ManagerRole"
                } ]
            }
        },
        "SwarmAutoscalePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "swarm-autoscale-policy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "ec2:*",
                        "Resource": "*"
                    } ]
                },
                "Roles": [ {
                    "Ref": "ManagerRole"
                } ]
            }
        },
        "ProxyPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "elb-update",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "elasticloadbalancing:*",
                        "Resource": "*"
                    } ]
                },
                "Roles": [ {
                    "Ref": "ManagerRole"
                } ]
            }
        },
        "ManagerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "ManagerRole"
                } ]
            }
        }
    },
    "Outputs": {
        "DefaultDNSTarget" : {
            "Description" : "Use this name to update your DNS records",
            "Value" : {
                "Fn::GetAtt" : [ "ExternalLoadBalancer", "DNSName" ]
            }
        },
        "SSH" : {
            "Description" : "Use this command to login to your Docker console.",
            "Value" : {
                "Fn::Join": [ "", ["ssh docker@", {"Fn::GetAtt" : [ "SSHLoadBalancer", "DNSName"] } ] ]
            }
        }
    }
}
